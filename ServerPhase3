from socket import *
import math
import time
import numpy as np
import cv2 as cv
import tkinter as tk
from PIL import Image, ImageTk
import binascii
import socket
import struct
import sys
import hashlib
import base64
from struct import *
from socket import *
from struct import *
import math
import time
import numpy as np
import cv2 as cv
import tkinter as tk
from PIL import Image, ImageTk
import datetime


serverPort = 12345

serverSocket = socket(AF_INET, SOCK_DGRAM)
serverSocket.bind(('', serverPort))
print("Server Opened At: %s" %datetime.datetime.now())



numPackets, clientAddress = serverSocket.recvfrom(2048)

receivedFile = []
receiving = 0
size = int(numPackets.decode())

counter = 0
while True:
   
    ######## RECIEVE AND UNPACK DATA #########
    counter = counter + 1
    message, clientAddress = serverSocket.recvfrom(2048)
    ACK, SEQ, checksum, data = unpack(f'ii 32s {len(message[40:])}s', message)
    ######## RECIEVE AND UNPACK DATA #########
    


    ########### Create serverside checksum to compare ###########
    packed_data=pack(f'ii {len(data)}s', ACK,SEQ,data)
    serverchecksum= hashlib.md5(packed_data).hexdigest().encode('utf-8')
    print("Server side checksum:", serverchecksum)
    ########### Create serverside checksum to compare ###########

    if checksum==serverchecksum:
         print("Packet ", counter, "has a matching checksum")

    else:
         print ("Packet ", counter, "does NOT have a matching checksum")


    receivedFile.append(data)
    receiving = receiving + 1

    if receiving == size:
        break

image = receivedFile[0]
for i in range(1, size):
    image = image + receivedFile[i]


image = np.asarray(bytearray(image), dtype = "uint8")
image = cv.imdecode(image, cv.IMREAD_COLOR)

cv.imshow('img', image)
cv.waitKey()
